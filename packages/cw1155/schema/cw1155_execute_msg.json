{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Cw1155ExecuteMsg",
  "anyOf": [
    {
      "description": "SendFrom is a base message to move tokens, if `env.sender` is the owner or has sufficient pre-approval.",
      "type": "object",
      "required": [
        "send_from"
      ],
      "properties": {
        "send_from": {
          "type": "object",
          "required": [
            "from",
            "to",
            "token_id",
            "value"
          ],
          "properties": {
            "from": {
              "$ref": "#/definitions/HumanAddr"
            },
            "msg": {
              "description": "`None` means don't call the receiver interface",
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            },
            "to": {
              "description": "If `to` is not contract, `msg` should be `None`",
              "allOf": [
                {
                  "$ref": "#/definitions/HumanAddr"
                }
              ]
            },
            "token_id": {
              "type": "string"
            },
            "value": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      }
    },
    {
      "description": "BatchSendFrom is a base message to move multiple types of tokens in batch, if `env.sender` is the owner or has sufficient pre-approval.",
      "type": "object",
      "required": [
        "batch_send_from"
      ],
      "properties": {
        "batch_send_from": {
          "type": "object",
          "required": [
            "batch",
            "from",
            "to"
          ],
          "properties": {
            "batch": {
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "from": {
              "$ref": "#/definitions/HumanAddr"
            },
            "msg": {
              "description": "`None` means don't call the receiver interface",
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            },
            "to": {
              "description": "if `to` is not contract, `msg` should be `None`",
              "allOf": [
                {
                  "$ref": "#/definitions/HumanAddr"
                }
              ]
            }
          }
        }
      }
    },
    {
      "description": "Mint is a base message to mint tokens.",
      "type": "object",
      "required": [
        "mint"
      ],
      "properties": {
        "mint": {
          "type": "object",
          "required": [
            "to",
            "token_id",
            "value"
          ],
          "properties": {
            "msg": {
              "description": "`None` means don't call the receiver interface",
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            },
            "to": {
              "description": "If `to` is not contract, `msg` should be `None`",
              "allOf": [
                {
                  "$ref": "#/definitions/HumanAddr"
                }
              ]
            },
            "token_id": {
              "type": "string"
            },
            "value": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      }
    },
    {
      "description": "BatchMint is a base message to mint multiple types of tokens in batch.",
      "type": "object",
      "required": [
        "batch_mint"
      ],
      "properties": {
        "batch_mint": {
          "type": "object",
          "required": [
            "batch",
            "to"
          ],
          "properties": {
            "batch": {
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "msg": {
              "description": "`None` means don't call the receiver interface",
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            },
            "to": {
              "description": "If `to` is not contract, `msg` should be `None`",
              "allOf": [
                {
                  "$ref": "#/definitions/HumanAddr"
                }
              ]
            }
          }
        }
      }
    },
    {
      "description": "Burn is a base message to burn tokens.",
      "type": "object",
      "required": [
        "burn"
      ],
      "properties": {
        "burn": {
          "type": "object",
          "required": [
            "from",
            "token_id",
            "value"
          ],
          "properties": {
            "from": {
              "$ref": "#/definitions/HumanAddr"
            },
            "token_id": {
              "type": "string"
            },
            "value": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      }
    },
    {
      "description": "BatchBurn is a base message to burn multiple types of tokens in batch.",
      "type": "object",
      "required": [
        "batch_burn"
      ],
      "properties": {
        "batch_burn": {
          "type": "object",
          "required": [
            "batch",
            "from"
          ],
          "properties": {
            "batch": {
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "from": {
              "$ref": "#/definitions/HumanAddr"
            }
          }
        }
      }
    },
    {
      "description": "Allows operator to transfer / send any token from the owner's account. If expiration is set, then this allowance has a time/height limit",
      "type": "object",
      "required": [
        "approve_all"
      ],
      "properties": {
        "approve_all": {
          "type": "object",
          "required": [
            "operator"
          ],
          "properties": {
            "expires": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Expiration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "operator": {
              "$ref": "#/definitions/HumanAddr"
            }
          }
        }
      }
    },
    {
      "description": "Remove previously granted ApproveAll permission",
      "type": "object",
      "required": [
        "revoke_all"
      ],
      "properties": {
        "revoke_all": {
          "type": "object",
          "required": [
            "operator"
          ],
          "properties": {
            "operator": {
              "$ref": "#/definitions/HumanAddr"
            }
          }
        }
      }
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Expiration": {
      "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
      "anyOf": [
        {
          "description": "AtHeight will expire when `env.block.height` >= height",
          "type": "object",
          "required": [
            "at_height"
          ],
          "properties": {
            "at_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        {
          "description": "AtTime will expire when `env.block.time` >= time",
          "type": "object",
          "required": [
            "at_time"
          ],
          "properties": {
            "at_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        {
          "description": "Never will never expire. Used to express the empty variant",
          "type": "object",
          "required": [
            "never"
          ],
          "properties": {
            "never": {
              "type": "object"
            }
          }
        }
      ]
    },
    "HumanAddr": {
      "type": "string"
    },
    "Uint128": {
      "type": "string"
    }
  }
}
