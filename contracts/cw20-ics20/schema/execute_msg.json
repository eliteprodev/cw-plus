{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "description": "This accepts a properly-encoded ReceiveMsg from a cw20 contract",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      }
    },
    {
      "description": "This allows us to transfer *exactly one* native token",
      "type": "object",
      "required": [
        "transfer"
      ],
      "properties": {
        "transfer": {
          "$ref": "#/definitions/TransferMsg"
        }
      }
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a HandleMsg",
      "type": "object",
      "required": [
        "amount",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        },
        "sender": {
          "$ref": "#/definitions/HumanAddr"
        }
      }
    },
    "HumanAddr": {
      "type": "string"
    },
    "TransferMsg": {
      "description": "This is the message we accept via Receive",
      "type": "object",
      "required": [
        "channel",
        "remote_address"
      ],
      "properties": {
        "channel": {
          "description": "The local channel to send the packets on",
          "type": "string"
        },
        "remote_address": {
          "description": "The remote address to send to Don't use HumanAddress as this will likely have a different Bech32 prefix than we use and cannot be validated locally",
          "type": "string"
        },
        "timeout": {
          "description": "How long the packet lives in seconds. If not specified, use default_timeout",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "type": "string"
    }
  }
}
