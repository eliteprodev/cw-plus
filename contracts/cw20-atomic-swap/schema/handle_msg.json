{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "HandleMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "create"
      ],
      "properties": {
        "create": {
          "$ref": "#/definitions/CreateMsg"
        }
      }
    },
    {
      "description": "Release sends all tokens to the recipient.",
      "type": "object",
      "required": [
        "release"
      ],
      "properties": {
        "release": {
          "type": "object",
          "required": [
            "id",
            "preimage"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "preimage": {
              "description": "This is the preimage, must be exactly 32 bytes in hex (64 chars) to release: sha256(from_hex(preimage)) == from_hex(hash)",
              "type": "string"
            }
          }
        }
      }
    },
    {
      "description": "Refund returns all remaining tokens to the original sender,",
      "type": "object",
      "required": [
        "refund"
      ],
      "properties": {
        "refund": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "description": "This accepts a properly-encoded ReceiveMsg from a cw20 contract",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      }
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "CreateMsg": {
      "type": "object",
      "required": [
        "expires",
        "hash",
        "id",
        "recipient"
      ],
      "properties": {
        "expires": {
          "description": "You can set expiration at time or at block height the contract is valid at. After the contract is expired, it can be returned to the original funder.",
          "allOf": [
            {
              "$ref": "#/definitions/Expiration"
            }
          ]
        },
        "hash": {
          "description": "This is hex-encoded sha-256 hash of the preimage (must be 32*2 = 64 chars)",
          "type": "string"
        },
        "id": {
          "description": "id is a human-readable name for the swap to use later. 3-20 bytes of utf-8 text",
          "type": "string"
        },
        "recipient": {
          "description": "If approved, funds go to the recipient",
          "allOf": [
            {
              "$ref": "#/definitions/HumanAddr"
            }
          ]
        }
      }
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a HandleMsg",
      "type": "object",
      "required": [
        "amount",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        },
        "sender": {
          "$ref": "#/definitions/HumanAddr"
        }
      }
    },
    "Expiration": {
      "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
      "anyOf": [
        {
          "description": "AtHeight will expire when `env.block.height` >= height",
          "type": "object",
          "required": [
            "at_height"
          ],
          "properties": {
            "at_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        {
          "description": "AtTime will expire when `env.block.time` >= time",
          "type": "object",
          "required": [
            "at_time"
          ],
          "properties": {
            "at_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        {
          "description": "Never will never expire. Used to express the empty variant",
          "type": "object",
          "required": [
            "never"
          ],
          "properties": {
            "never": {
              "type": "object"
            }
          }
        }
      ]
    },
    "HumanAddr": {
      "type": "string"
    },
    "Uint128": {
      "type": "string"
    }
  }
}
